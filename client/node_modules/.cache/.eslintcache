[{"/Users/philbrockman/coding/sc2/client/src/index.js":"1","/Users/philbrockman/coding/sc2/client/src/App.js":"2","/Users/philbrockman/coding/sc2/client/src/serviceWorker.js":"3","/Users/philbrockman/coding/sc2/client/src/SC2Data.js":"4","/Users/philbrockman/coding/sc2/client/src/components/Upgrade.js":"5","/Users/philbrockman/coding/sc2/client/src/components/Defender.js":"6","/Users/philbrockman/coding/sc2/client/src/components/dashboard/Dashboard.js":"7","/Users/philbrockman/coding/sc2/client/src/components/Middle.js":"8","/Users/philbrockman/coding/sc2/client/src/components/Attacker/Attacker.js":"9","/Users/philbrockman/coding/sc2/client/src/components/Attacker/Damage.js":"10","/Users/philbrockman/coding/sc2/client/src/components/UnitSelector/UnitSelector.js":"11","/Users/philbrockman/coding/sc2/client/src/components/UnitSelector/Unit.js":"12","/Users/philbrockman/coding/sc2/client/src/components/dashboard/EditUnits.js":"13"},{"size":2139,"mtime":1623198836671,"results":"14","hashOfConfig":"15"},{"size":3786,"mtime":1623198924916,"results":"16","hashOfConfig":"15"},{"size":5014,"mtime":1622337344326,"results":"17","hashOfConfig":"18"},{"size":7736,"mtime":1622477222069,"results":"19","hashOfConfig":"15"},{"size":1131,"mtime":1622650287303,"results":"20","hashOfConfig":"15"},{"size":264,"mtime":1622651662728,"results":"21","hashOfConfig":"15"},{"size":364,"mtime":1623198677084,"results":"22","hashOfConfig":"15"},{"size":11537,"mtime":1623041645469,"results":"23","hashOfConfig":"15"},{"size":5527,"mtime":1623003609017,"results":"24","hashOfConfig":"15"},{"size":5013,"mtime":1623002508693,"results":"25","hashOfConfig":"15"},{"size":7192,"mtime":1623122158479,"results":"26","hashOfConfig":"15"},{"size":1738,"mtime":1623121498521,"results":"27","hashOfConfig":"15"},{"size":6708,"mtime":1623270900807,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1o01c8y",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1sktcs4",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/philbrockman/coding/sc2/client/src/index.js",[],["59","60"],"/Users/philbrockman/coding/sc2/client/src/App.js",[],"/Users/philbrockman/coding/sc2/client/src/serviceWorker.js",[],["61","62"],"/Users/philbrockman/coding/sc2/client/src/SC2Data.js",[],["63","64"],"/Users/philbrockman/coding/sc2/client/src/components/Upgrade.js",[],"/Users/philbrockman/coding/sc2/client/src/components/Defender.js",[],"/Users/philbrockman/coding/sc2/client/src/components/dashboard/Dashboard.js",[],"/Users/philbrockman/coding/sc2/client/src/components/Middle.js",[],"/Users/philbrockman/coding/sc2/client/src/components/Attacker/Attacker.js",[],"/Users/philbrockman/coding/sc2/client/src/components/Attacker/Damage.js",[],"/Users/philbrockman/coding/sc2/client/src/components/UnitSelector/UnitSelector.js",[],"/Users/philbrockman/coding/sc2/client/src/components/UnitSelector/Unit.js",[],"/Users/philbrockman/coding/sc2/client/src/components/dashboard/EditUnits.js",["65","66","67"],"\nimport React from \"react\"\nimport {useUnits} from \"../UnitSelector/Unit\"\nimport \"./EditUnits.css\"\n\nconst UpdateAttribute = ({updateFunction, label, attributeValue, clicks}) => {\n  const [value, setValue] = React.useState(attributeValue)\n  const [dirty, setDirty] = React.useState(false)\n\n  React.useEffect(() => {\n    if(String(value) !== String(attributeValue)){\n      setDirty(true)\n    } else{\n      setDirty(false)\n    }\n  }, [value])\n\n  React.useEffect(() => {\n    if(clicks > 0){\n      if(dirty && value !== attributeValue){\n        updateFunction(value)\n        setDirty(false)\n      }\n    }\n  }, [clicks])\n\n  const style= {\n    backgroundColor: dirty? \"rgba(255,0,0, .2)\" : \"rgba(0,255,0, .1)\",\n  }\n  \n  return <div className={\"row\"}>\n    <div>{label}</div>\n    <input style={style} type=\"text\" onChange={(e) => setValue(e.target.value)} value={value || \"\"} />\n  </div>\n}\nconst assign = (property, value) => {\n  const newObject = {};\n  newObject[property] = value;\n  return newObject;\n}\n\nconst UpdateBonus = ({bonus, prefix ,updateFunction, clicks}) => {\n  return <>\n  <UpdateAttribute label={\"To\"} \n        attributeValue={bonus.to} \n        updateFunction={(val) => \n            updateFunction( assign(prefix+\"to\", (val)))}\n        clicks={clicks} />\n  <UpdateAttribute label={\"Research Bonus\"} \n        attributeValue={bonus.researchBonus} \n        updateFunction={(val) => \n            updateFunction( assign(prefix+\"researchBonus\", parseInt(val)))}\n        clicks={clicks} />\n  <UpdateAttribute label={\"Base Damage\"} \n        attributeValue={bonus.baseDamage} \n        updateFunction={(val) => \n            updateFunction( assign(prefix+\"baseDamage\", parseInt(val)))}\n        clicks={clicks} />\n  </>\n}\n\nconst EditAttack = ({attack, updateFunction, id, clicks}) => {\n  \n  return <div className={\"row\"}>\n    <div>\n      <h3>{attack.name}</h3>\n    <UpdateAttribute label={\"Attack Name\"} \n          attributeValue={attack.name} \n          updateFunction={(val) => \n              updateFunction( assign(\"attacks.\"+id+\".name\", val))}\n          clicks={clicks} />\n    <EditArray label={\"Targets\"} arr={attack.targets} updateFunction={updateFunction} prefix={\"attacks.\"+id+\".targets.\"} clicks={clicks} />\n    <UpdateAttribute label={\"Research Bonus\"} \n          attributeValue={attack.researchBonus} \n          updateFunction={(val) => \n              updateFunction( assign(\"attacks.\"+id+\".researchBonus\", parseInt(val)))}\n          clicks={clicks} />\n    <UpdateAttribute label={\"Base Damage\"} \n          attributeValue={attack.baseDamage} \n          updateFunction={(val) => \n              updateFunction( assign(\"attacks.\"+id+\".baseDamage\", parseInt(val)))}\n          clicks={clicks} />\n    <UpdateAttribute label={\"Repeats\"} \n          attributeValue={attack.repeats} \n          updateFunction={(val) => \n              updateFunction( assign(\"attacks.\"+id+\".repeats\", parseInt(val)))}\n          clicks={clicks} />\n    </div>\n    {attack.bonuses.length > 0 ?<div>\n    \n    <h4>Bonuses</h4>\n    {attack.bonuses.map((bonus, bid) => {\n      return <div key={bid}>\n        <UpdateBonus bonus = {bonus} \n        prefix={[\"attacks\", id, \"bonuses\", bid, \"\"].join(\".\")}\n        updateFunction={updateFunction}\n        clicks={clicks}/>\n      </div>\n\n    }\n    ) } </div>: null }    \n  </div>\n}\n\nconst EditArray = ({label, arr, prefix, updateFunction, clicks}) => {\n  console.log('prefix', prefix)\n  const elements = arr.map((item, id) => {\n    return <div key={id} className={\"row\"}>\n      <div>\n        <UpdateAttribute label={null} \n            attributeValue={item} \n            updateFunction={(val) => \n                updateFunction( assign(prefix+id, val))}\n            clicks={clicks} />\n      </div>\n      <div>\n        <button onClick={() => updateFunction(assign(prefix.slice(0, -1), item), \"$pull\")}>Remove</button>\n      </div>\n    </div>\n  })\n\n  const add_element = <button onClick={() => updateFunction(assign(prefix.slice(0, -1), \"\"), \"$push\")}>Add Element</button>\n  return <>\n  <div>{label}</div>\n  <div>{elements}</div>\n  <div>{add_element}</div>\n  </>\n}\n\nconst EditUnit = ({unit}) => {\n  const [response, setResponse] = React.useState(null)\n  const [updates, setUpdates] = React.useState(0)\n\n  const updateUnit = (attribute, operation=\"$set\") => {\n    const url = \"http://localhost:5000/api/update/\" + unit._id\n\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      json: true,\n      mode: 'cors',\n      body: JSON.stringify({\n        operation: operation,\n        attribute: attribute\n      }),\n    }).then(data => {\n      data.json()\n      console.log('data', data)\n      setResponse(data)\n    })\n  }\n  \n  return <>\n  <div className={\"update-attributes\"}>\n    <div>\n        <h2>{unit.name}</h2>\n          <UpdateAttribute label={\"Builds at: \"} \n                attributeValue={unit.structure} \n                updateFunction={(val) => \n                    updateUnit( {\"structure\" : (val)} )}\n                clicks={updates} />\n        <h2>Types</h2>\n        <EditArray arr={unit.types} updateFunction={updateUnit} prefix={\"types.\"} clicks={updates} />\n        <div>\n          <h2>Base Stats</h2>\n          <UpdateAttribute label={\"Health\"} \n                attributeValue={unit.base.health} \n                updateFunction={(val) => \n                    updateUnit( {\"base.health\" : parseInt(val)} )}\n                clicks={updates} />\n          <UpdateAttribute label={\"Armor\"} \n                attributeValue={unit.base.armor} \n                updateFunction={(val) => \n                    updateUnit( { \"base.armor\" : parseInt(val) } )}\n                clicks={updates} />\n          {unit.base.shields?\n            <UpdateAttribute label={\"Shields\"} \n                attributeValue={unit.base.shields} \n                updateFunction={(val) => \n                    updateUnit( { \"base.shields\" : parseInt(val)} )}\n                clicks={updates} />\n            : null}\n        </div>\n    </div>\n    <div>\n        <h2>Attacks</h2>\n        {unit.attacks.map((attack ,id) => <div key={id}>\n          <EditAttack \n                attack={attack} \n                id={id}\n                clicks={updates}\n                updateFunction={updateUnit}/>\n          </div>)}\n        <button onClick={() => setUpdates(updates+1)}>Update Responses</button>\n    </div>\n  </div>\n  </>\n}\n\nexport const EditUnits = () => {\n  const [locked, units] = useUnits()\n\n  return <>\n  <div className={\"container\"}>\n    {!locked ? <>wating for units to load </> : \n      units?.filter(unit => unit.name === \"Siege Tank\").map(unit => <div key={unit._id}> <EditUnit unit={unit}/> </div>)\n    }\n  </div>\n  </>\n}",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"68","replacedBy":"72"},{"ruleId":"70","replacedBy":"73"},{"ruleId":"68","replacedBy":"74"},{"ruleId":"70","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":16,"column":6,"nodeType":"78","endLine":16,"endColumn":13,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":25,"column":6,"nodeType":"78","endLine":25,"endColumn":14,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":131,"column":10,"nodeType":"84","messageId":"85","endLine":131,"endColumn":18},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],["86"],["87"],["86"],["87"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'attributeValue'. Either include it or remove the dependency array.","ArrayExpression",["88"],"React Hook React.useEffect has missing dependencies: 'attributeValue', 'dirty', 'updateFunction', and 'value'. Either include them or remove the dependency array. If 'updateFunction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["89"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [attributeValue, value]",{"range":"94","text":"95"},"Update the dependencies array to be: [attributeValue, clicks, dirty, updateFunction, value]",{"range":"96","text":"97"},[430,437],"[attributeValue, value]",[604,612],"[attributeValue, clicks, dirty, updateFunction, value]"]