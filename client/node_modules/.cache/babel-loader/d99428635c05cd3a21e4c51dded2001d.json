{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/client/src/components/Attacker/Attacker.js\";\nimport React from 'react';\nimport { UnitSelector } from '../UnitSelector/UnitSelector';\nimport { groundAirTargetingValidation, canAttackTargetDefender } from \"./Damage\";\nimport \"./Attacker.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bonus = ({\n  attack,\n  defender,\n  textstyle\n}) => {\n  return attack.bonuses.map((bonus, index) => {\n    let baseText = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Anti-\", bonus.to, \":\"]\n    }, void 0, true);\n\n    let bonusText = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [bonus.baseDamage, \" (+\", bonus.researchBonus, \")\"]\n    }, void 0, true);\n\n    let modifier;\n\n    if (!defender) {\n      modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: bonusText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 18\n      }, this);\n    } else {\n      // const overlap = false;//groundAirTargetingValidation(attack, defender);\n      // if (overlap.length === 0){\n      //   modifier = <span> {bonusText} </span>\n      // }else{\n      if (defender.types.includes(bonus.to)) {\n        modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [bonusText, \" \\uD83C\\uDFAF\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 22\n        }, this);\n      } else {\n        modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: \"wavy line-through red\"\n          },\n          children: bonusText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this);\n      } // }\n\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [baseText, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: textstyle,\n        children: modifier\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c = Bonus;\n\nconst Bullet = ({\n  animate,\n  display\n}) => {\n  if (display) {\n    if (animate) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bullet\",\n        children: \"\\u27A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\u27A1\"\n      }, void 0, false);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c2 = Bullet;\n\nconst WeaponDisplay = ({\n  available,\n  selected,\n  classes\n}) => {\n  return \"weapon\"; // const cns = []\n  // cns.push(index === attacker.weapon ? \"main-weapon\" : \"other-choice\");\n  // cns.push(available ? \"attack-available\" : \"attack-unavailable\");\n  // const attacks = [\"attack-name\"]\n  // attacks.push(available? \"alt-weapon\": \"unavailable\")\n  // attacks.push(available && (defaultIndex === null) ? \"pulse\": \"\")\n  // console.log('attacks', attacks)\n  // console.log('defaultIndex', defaultIndex)\n  // return <div key={index} onClick={() => toggleIndex(index)} className={cns.join(\" \")}>\n  //   <>\n  //     <div className={classes.join(\" \")} >\n  //       <Bullet animate={available && (defaultIndex === null)} display={(true)}/>\n  //           {attack.name} {attack.repeats > 1 ? <>(x {attack.repeats})</>: null}\n  //     {index === defaultIndex ?\n  //       <div>\n  //         <>Base Damage: <span className={cn}>{attack.baseDamage} (+{attack.researchBonus})</span></>\n  //         <Bonus attack={attack} defender={defender} textstyle={cn}/>\n  //       </div>\n  //       : null\n  //       }\n  //       </div>\n  //   </>\n  // </div>\n};\n\n_c3 = WeaponDisplay;\n\nconst Attacks = ({\n  attacker,\n  defender,\n  setAttackingWeapon\n}) => {\n  var _unit, _unit$attacks, _unit2, _unit2$attacks;\n\n  const toggleWeapon = index => {\n    if (index === defaultIndex) {\n      setAttackingWeapon(null);\n    } else {\n      setAttackingWeapon(index);\n    }\n  };\n\n  const attackMap = (_unit = unit) === null || _unit === void 0 ? void 0 : (_unit$attacks = _unit.attacks) === null || _unit$attacks === void 0 ? void 0 : _unit$attacks.map((attack, index) => {\n    return /*#__PURE__*/_jsxDEV(WeaponDisplay, {\n      available: canAttackTargetDefender(attack, defender),\n      selected: index === attacker.weapon,\n      classes: attacks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"attacks\",\n    children: [((_unit2 = unit) === null || _unit2 === void 0 ? void 0 : (_unit2$attacks = _unit2.attacks) === null || _unit2$attacks === void 0 ? void 0 : _unit2$attacks.length) > 0 ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Attacks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this) : null, attackMap]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n\n_c4 = Attacks;\nexport const Attacker = ({\n  unit,\n  defender,\n  setUnit,\n  attackIndex,\n  setAttackIndex,\n  units\n}) => {\n  const setAttackingWeapon = () => {\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UnitSelector, {\n      setUnit: setUnit,\n      currentUnit: unit,\n      units: units,\n      children: /*#__PURE__*/_jsxDEV(Attacks, {\n        unit: unit,\n        setAttackingWeapon: setAttackingWeapon,\n        defender: defender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n};\n_c5 = Attacker;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Bonus\");\n$RefreshReg$(_c2, \"Bullet\");\n$RefreshReg$(_c3, \"WeaponDisplay\");\n$RefreshReg$(_c4, \"Attacks\");\n$RefreshReg$(_c5, \"Attacker\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/client/src/components/Attacker/Attacker.js"],"names":["React","UnitSelector","groundAirTargetingValidation","canAttackTargetDefender","Bonus","attack","defender","textstyle","bonuses","map","bonus","index","baseText","to","bonusText","baseDamage","researchBonus","modifier","types","includes","textDecoration","Bullet","animate","display","WeaponDisplay","available","selected","classes","Attacks","attacker","setAttackingWeapon","toggleWeapon","defaultIndex","attackMap","unit","attacks","weapon","length","Attacker","setUnit","attackIndex","setAttackIndex","units"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { UnitSelector } from '../UnitSelector/UnitSelector'\nimport {groundAirTargetingValidation, canAttackTargetDefender} from \"./Damage\"\nimport \"./Attacker.css\"\n\nconst Bonus = ({attack, defender, textstyle}) => {\n\n  return attack.bonuses.map((bonus, index) => {\n    let baseText = <>Anti-{bonus.to}:</>\n    let bonusText = <>{bonus.baseDamage} (+{bonus.researchBonus})</>;\n    let modifier;\n    \n    if(!defender){\n      modifier = <span>{bonusText}</span>\n    } else {\n      // const overlap = false;//groundAirTargetingValidation(attack, defender);\n      // if (overlap.length === 0){\n      //   modifier = <span> {bonusText} </span>\n      // }else{\n        if (defender.types.includes(bonus.to) ){\n          modifier=  <span>{bonusText} 🎯</span>\n        } else {\n          modifier= <span style={{textDecoration: \"wavy line-through red\"}}>{ bonusText}</span>\n        }\n      // }\n    }\n\n    return <div key={index}>\n      {baseText}\n      <span className={textstyle}>\n      {modifier}\n      </span>\n    </div>\n  })  \n}\n\nconst Bullet = ({animate, display}) => {\n  if(display){\n    if (animate){\n      return <span className={\"bullet\"}>➡</span>\n    } else {\n      return <>➡</>\n    }\n  } else {\n    return <></>\n  }\n}\n\nconst WeaponDisplay = ({available, selected, classes}) => {\n  return \"weapon\"\n  // const cns = []\n  // cns.push(index === attacker.weapon ? \"main-weapon\" : \"other-choice\");\n  // cns.push(available ? \"attack-available\" : \"attack-unavailable\");\n  // const attacks = [\"attack-name\"]\n  // attacks.push(available? \"alt-weapon\": \"unavailable\")\n  // attacks.push(available && (defaultIndex === null) ? \"pulse\": \"\")\n  // console.log('attacks', attacks)\n  // console.log('defaultIndex', defaultIndex)\n  // return <div key={index} onClick={() => toggleIndex(index)} className={cns.join(\" \")}>\n  //   <>\n  //     <div className={classes.join(\" \")} >\n  //       <Bullet animate={available && (defaultIndex === null)} display={(true)}/>\n  //           {attack.name} {attack.repeats > 1 ? <>(x {attack.repeats})</>: null}\n  //     {index === defaultIndex ?\n  //       <div>\n  //         <>Base Damage: <span className={cn}>{attack.baseDamage} (+{attack.researchBonus})</span></>\n  //         <Bonus attack={attack} defender={defender} textstyle={cn}/>\n  //       </div>\n  //       : null\n  //       }\n  //       </div>\n  //   </>\n  // </div>\n}\n\nconst Attacks = ({attacker, defender, setAttackingWeapon}) => {\n  const toggleWeapon= (index) => {\n      if(index === defaultIndex){\n        setAttackingWeapon(null)\n      } else {\n        setAttackingWeapon(index)\n      }\n    }\n  const attackMap = unit?.attacks?.map((attack, index) => {\n    return <WeaponDisplay available={canAttackTargetDefender(attack, defender)}\n                           selected={index === attacker.weapon} classes={attacks}/>\n    \n  \n  })\n\n  return <div className={\"attacks\"}>\n    {unit?.attacks?.length > 0 ?\n      <h1>Attacks</h1> : null}\n\n      {attackMap}\n  </div>\n}\n\nexport const Attacker = ({unit, defender, setUnit, attackIndex, setAttackIndex, units}) => {\n  const setAttackingWeapon = () => {\n    return null;\n  }\n  return <>\n  <UnitSelector setUnit={setUnit} currentUnit={unit} units={units}> \n      <Attacks unit={unit} setAttackingWeapon={setAttackingWeapon} defender={defender} />\n  </UnitSelector>\n  </>\n}\n"]},"metadata":{},"sourceType":"module"}