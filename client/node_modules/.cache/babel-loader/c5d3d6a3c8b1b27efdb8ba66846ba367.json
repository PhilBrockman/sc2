{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/src/components/UnitSelector.js\";\nimport React from \"react\";\nimport { units } from \"../SC2Data\";\nimport { useSpring, animated } from 'react-spring';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\"\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {}\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n};\n\nconst camel2str = str => {\n  // adding space between strings\n  const result = str.replace(/([A-Z])/g, ' $1'); // converting first character to uppercase and join it to the final string\n\n  const final = result.charAt(0).toUpperCase() + result.slice(1);\n  return final;\n};\n\nexport const UnitSelector = ({\n  setUnit\n}) => {\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const Production = ({\n    structure,\n    path\n  }) => {\n    _s();\n\n    const [hidden, setHidden] = React.useState(false);\n    const subUnits = units.filter(unit => unit.structure === structure);\n    let display;\n\n    if (hidden) {\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    } else {\n      display = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"units-selector\",\n        children: subUnits.map((unit, index) => {\n          let inlineStyle = {\n            backgroundSize: 'contain',\n            backgroundRepeat: 'no-repeat',\n            backgroundImage: `url(${unit.img})`\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setUnit(unit),\n            className: \"unit-selection\",\n            style: inlineStyle,\n            children: /*#__PURE__*/_jsxDEV(\"header\", {\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: unit.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 11\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 16\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    }\n\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${path})`\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unit-selection\",\n        style: inlineStyle,\n        onClick: () => setHidden(!hidden),\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: camel2str(structure)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }, this), display]\n    }, void 0, true);\n  };\n\n  _s(Production, \"kQt600tPsTduHMlWvIDJn56wzAI=\");\n\n  const Faction = ({\n    data\n  }) => {\n    _s2();\n\n    const [hidden, setHidden] = React.useState(false);\n    const menuAppear = useSpring({\n      transform: hidden ? \"translate3D(0,0,0)\" : \"translate3D(0,-40px,0)\",\n      opacity: hidden ? 0 : 1\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.icon,\n        onClick: () => setHidden(!hidden)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), hidden ? \"\" : /*#__PURE__*/_jsxDEV(animated.div, {\n        style: props,\n        children: Object.entries(data.production).map(([structure, path]) => {\n          return /*#__PURE__*/_jsxDEV(Production, {\n            structure: structure,\n            path: path\n          }, structure, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  _s2(Faction, \"omj+oUGAC92Ix0s5jOGHl/Sd1FQ=\", false, function () {\n    return [useSpring];\n  });\n\n  return Object.entries(factions).map(([key, value]) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"faction\",\n      children: /*#__PURE__*/_jsxDEV(Faction, {\n        data: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  });\n};\n_c = UnitSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnitSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/components/UnitSelector.js"],"names":["React","units","useSpring","animated","factions","terran","icon","production","barracks","factory","zerg","protoss","roboticsFacility","camel2str","str","result","replace","final","charAt","toUpperCase","slice","UnitSelector","setUnit","Production","structure","path","hidden","setHidden","useState","subUnits","filter","unit","display","map","index","inlineStyle","backgroundSize","backgroundRepeat","backgroundImage","img","name","Faction","data","menuAppear","transform","opacity","props","Object","entries","key","value"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {units} from \"../SC2Data\"\nimport { useSpring, animated } from 'react-spring'\n\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\",\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {\n\n    }\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n}\n\nconst camel2str = (str) => {\n   // adding space between strings\n  const result = str.replace(/([A-Z])/g,' $1');\n\n  // converting first character to uppercase and join it to the final string\n  const final = result.charAt(0).toUpperCase()+result.slice(1);\n  return final\n}\n\nexport const UnitSelector = ({setUnit}) => {\n  const Production = ({structure, path}) => {\n    const [hidden, setHidden] = React.useState(false)\n    const subUnits = units.filter(unit => unit.structure === structure)\n    let display;\n\n    if(hidden){\n      display = <></>\n    } else {\n      display = <div className={\"units-selector\"}>\n      {subUnits.map((unit,index) => {\n        let inlineStyle = {\n          backgroundSize: 'contain',\n          backgroundRepeat: 'no-repeat',\n          backgroundImage: `url(${ unit.img})`};\n        return <div key={index} onClick={() => setUnit(unit)} className={\"unit-selection\"} style={inlineStyle}>\n          <header><h1>{unit.name}</h1></header>\n        </div>\n      })}\n      </div>\n    }\n\n\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${ path})`};\n\n    return <><div className={\"unit-selection\"} style={inlineStyle} onClick={() => setHidden(!hidden)}>\n    <header><h1>{camel2str(structure)}</h1></header>\n    </div>\n\n    {display}\n    </>\n  }\n\n  const Faction = ({data}) => {\n    const [hidden, setHidden] = React.useState(false);\n    const menuAppear = useSpring({\n      transform: hidden ? \"translate3D(0,0,0)\" : \"translate3D(0,-40px,0)\",\n      opacity: hidden ? 0 : 1,\n     })\n    return <>\n      <img src={data.icon} onClick={() => setHidden(!hidden)}></img>\n        {hidden ? \"\" : \n        <animated.div style={props}>\n          {\n            Object.entries(data.production).map(([structure, path]) => {\n              return <Production key={structure} structure={structure} path={path} />\n            })\n          }\n        </animated.div>\n      }\n      </>\n  }\n\n  return Object.entries(factions).map( ([key, value]) => {\n    return (\n      <div key={key} className={\"faction\"}>\n        <Faction data={value} />\n      </div>\n    );\n  })\n  \n  \n}"]},"metadata":{},"sourceType":"module"}