{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  attack: {\n    value: 0,\n    src: \"/attack.png\"\n  },\n  armor: {\n    value: 0,\n    src: \"/armor.png\"\n  },\n  shields: {\n    value: 0,\n    src: \"/shield.png\"\n  }\n};\nexport const upgradeSlice = createSlice({\n  name: 'upgrades',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  incrementByAmount\n} = upgradeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const researchCount = (state, payload) => {\n  console.log('payload', payload);\n  console.log('state', state);\n  state.upgrades.value;\n};\nexport default upgradeSlice.reducer;","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/features/upgrade/upgradeSlice.js"],"names":["createSlice","initialState","attack","value","src","armor","shields","upgradeSlice","name","reducers","incrementByAmount","state","action","payload","actions","researchCount","console","log","upgrades","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CADD;AAENC,IAAAA,GAAG,EAAE;AAFC,GADW;AAKnBC,EAAAA,KAAK,EAAE;AACLF,IAAAA,KAAK,EAAE,CADF;AAELC,IAAAA,GAAG,EAAE;AAFA,GALY;AASnBE,EAAAA,OAAO,EAAE;AACPH,IAAAA,KAAK,EAAE,CADA;AAEPC,IAAAA,GAAG,EAAE;AAFE;AATU,CAArB;AAeA,OAAO,MAAMG,YAAY,GAAGP,WAAW,CAAC;AACtCQ,EAAAA,IAAI,EAAE,UADgC;AAEtCP,EAAAA,YAFsC;AAGtC;AACAQ,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACR,KAAN,IAAeS,MAAM,CAACC,OAAtB;AACD;AAJO;AAJ4B,CAAD,CAAhC;AAYP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAwBH,YAAY,CAACO,OAA3C,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACJ,KAAD,EAAQE,OAAR,KAAoB;AAC/CG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,OAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAArB;AACAA,EAAAA,KAAK,CAACO,QAAN,CAAef,KAAf;AACD,CAJM;AAMP,eAAeI,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  attack: {\n    value: 0,\n    src: \"/attack.png\",\n  }, \n  armor: {\n    value: 0,\n    src: \"/armor.png\",\n  },\n  shields: {\n    value: 0,\n    src: \"/shield.png\",\n  },\n};\n\nexport const upgradeSlice = createSlice({\n  name: 'upgrades',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { incrementByAmount } = upgradeSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const researchCount = (state, payload) => {\n  console.log('payload', payload);\n  console.log('state', state)\n  state.upgrades.value;\n}\n\nexport default upgradeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}