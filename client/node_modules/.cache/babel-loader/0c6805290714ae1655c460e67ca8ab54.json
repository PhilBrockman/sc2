{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/src/components/UnitSelector.js\",\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { units } from \"../SC2Data\";\nimport { useSpring, animated } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\",\n      starport: \"/starport.png\"\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {}\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n};\n\nconst camel2str = str => {\n  // adding space between strings\n  const result = str.replace(/([A-Z])/g, ' $1'); // converting first character to uppercase and join it to the final string\n\n  const final = result.charAt(0).toUpperCase() + result.slice(1);\n  return final;\n};\n\nexport const UnitSelector = ({\n  setUnit,\n  currentUnit\n}) => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const [searchText, setSearchText] = React.useState(\"\");\n\n  const input = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"search\",\n    placeholder: \"...unit name\",\n    onChange: e => setSearchText(e.target.value),\n    value: searchText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 17\n  }, this);\n\n  const showUnits = subUnits => {\n    const classes = [\"unit-selection\"]; // activeUnit = ? \"#367180\": \"#\";\n\n    return subUnits.map((unit, index) => {\n      let inlineStyle = {\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'right',\n        backgroundImage: `url(${unit.img})`\n      };\n\n      if (currentUnit.name === unit.name) {// classes.push(\"active-unit\")\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setUnit(unit),\n        className: classes,\n        style: inlineStyle,\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: unit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this);\n    });\n  };\n\n  const Production = ({\n    structure,\n    path,\n    animations\n  }) => {\n    _s();\n\n    const [hidden, setHidden] = React.useState(true);\n    const subUnits = units.filter(unit => unit.structure === structure);\n    const menuAppear = useSpring({\n      transform: !hidden ? \"translate3D(0,0,0)\" : \"translate3D(-40px,-40px,0)\",\n      opacity: hidden ? 0 : 1\n    });\n    const imgBackground = useSpring({\n      background: hidden ? \"#ebebeb\" : \"#6ce2ff\"\n    });\n    let display = hidden ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"units-selector\",\n      children: showUnits(subUnits)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${path})`\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: imgBackground,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unit-selection\",\n          style: inlineStyle,\n          onClick: () => setHidden(!hidden),\n          children: /*#__PURE__*/_jsxDEV(\"header\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: camel2str(structure)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: display\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  };\n\n  _s(Production, \"mySj+yHGZcB2mvxdueew5R7ebtU=\", false, function () {\n    return [useSpring, useSpring];\n  });\n\n  const Faction = ({\n    data\n  }) => {\n    _s2();\n\n    const [hidden, setHidden] = React.useState(true);\n    const menuAppear = useSpring({\n      transform: !hidden ? \"translate3D(0,0,0)\" : \"translate3D(-400px,-40px,0)\",\n      opacity: hidden ? 0 : 1\n    });\n    const imgBackground = useSpring({\n      background: hidden ? \"#ebebeb\" : \"#6ce2ff\",\n      width: \"100%\"\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: imgBackground,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setHidden(!hidden),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: data.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 47\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), hidden ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.entries(data.production).map(([structure, path]) => {\n          return /*#__PURE__*/_jsxDEV(Production, {\n            structure: structure,\n            path: path\n          }, structure, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s2(Faction, \"mySj+yHGZcB2mvxdueew5R7ebtU=\", false, function () {\n    return [useSpring, useSpring];\n  });\n\n  if (searchText.length > 0) {\n    let subUnits = units.filter(unit => unit.name.toLowerCase().includes(searchText.toLowerCase()));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [input, showUnits(subUnits)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [input, Object.entries(factions).map(([key, value]) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"faction\",\n          children: /*#__PURE__*/_jsxDEV(Faction, {\n            data: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this);\n      })]\n    }, void 0, true);\n  }\n};\n\n_s3(UnitSelector, \"OAGvOw28fBJQW7HtXCjc9nvla2M=\");\n\n_c = UnitSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnitSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/components/UnitSelector.js"],"names":["React","units","useSpring","animated","factions","terran","icon","production","barracks","factory","starport","zerg","protoss","roboticsFacility","camel2str","str","result","replace","final","charAt","toUpperCase","slice","UnitSelector","setUnit","currentUnit","searchText","setSearchText","useState","input","e","target","value","showUnits","subUnits","classes","map","unit","index","inlineStyle","backgroundSize","backgroundRepeat","backgroundPosition","backgroundImage","img","name","Production","structure","path","animations","hidden","setHidden","filter","menuAppear","transform","opacity","imgBackground","background","display","Faction","data","width","Object","entries","length","toLowerCase","includes","key"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {units} from \"../SC2Data\"\nimport { useSpring, animated } from 'react-spring'\n\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\",\n      starport: \"/starport.png\",\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {\n\n    }\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n}\n\nconst camel2str = (str) => {\n   // adding space between strings\n  const result = str.replace(/([A-Z])/g,' $1');\n\n  // converting first character to uppercase and join it to the final string\n  const final = result.charAt(0).toUpperCase()+result.slice(1);\n  return final\n}\n\nexport const UnitSelector = ({setUnit, currentUnit}) => {\n  const [searchText, setSearchText] = React.useState(\"\")\n  const input = <input type={\"search\"} placeholder={\"...unit name\"} onChange={(e) => setSearchText(e.target.value)} value={searchText}/>\n\n  const showUnits = (subUnits) => {\n    const classes = [\"unit-selection\"]\n\n    // activeUnit = ? \"#367180\": \"#\";\n    return subUnits.map((unit,index) => {\n      let inlineStyle = {\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'right',\n        backgroundImage: `url(${ unit.img})`,\n      };\n      if( currentUnit.name === unit.name){\n        // classes.push(\"active-unit\")\n      }\n      return <div key={index} onClick={() => setUnit(unit)} className={classes} style={inlineStyle}>\n        <header><h1>{unit.name}</h1></header>\n      </div>\n    })\n  }\n\n  const Production = ({structure, path, animations}) => {\n    const [hidden, setHidden] = React.useState(true)\n    const subUnits = units.filter(unit => unit.structure === structure)\n    \n    const menuAppear = useSpring({\n      transform: !hidden ? \"translate3D(0,0,0)\" : \"translate3D(-40px,-40px,0)\",\n      opacity: hidden ? 0 : 1,\n     })\n\n    const imgBackground = useSpring({\n      background: hidden ?  \"#ebebeb\" : \"#6ce2ff\",\n    })\n\n    let display = hidden? <></> :\n      <div className={\"units-selector\"}>{showUnits(subUnits)}</div>;\n\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${ path})`,\n    };\n\n    return <>\n    <div style={imgBackground}>\n      <div className={\"unit-selection\"} style={inlineStyle} onClick={() => setHidden(!hidden)}>\n      <header><h1>{camel2str(structure)}</h1></header>\n      </div>\n      </div>\n    <div>{display}</div>\n    </>\n  }\n\n  const Faction = ({data}) => {\n    const [hidden, setHidden] = React.useState(true);\n    const menuAppear = useSpring({\n      transform: !hidden ? \"translate3D(0,0,0)\" : \"translate3D(-400px,-40px,0)\",\n      opacity: hidden ? 0 : 1,\n     })\n\n    const imgBackground = useSpring({\n      background: hidden ?  \"#ebebeb\" : \"#6ce2ff\",\n      width:\"100%\",\n    })\n\n    return <div style={imgBackground} >\n      <div onClick={() => setHidden(!hidden)}><img src={data.icon} ></img></div>\n        {hidden ? null : \n        <div>\n          {\n            Object.entries(data.production).map(([structure, path]) => {\n              return <Production \n                        key={structure} \n                        structure={structure} \n                        path={path} />\n            })\n          }\n        </div>\n      }\n      </div>\n  }\n\n  if(searchText.length > 0){\n    let subUnits = units.filter(unit => unit.name.toLowerCase().includes(searchText.toLowerCase()))\n    return <>\n      {input}\n      {showUnits(subUnits)}\n    </>\n  } else {\n    return <>\n      {input}\n      {Object.entries(factions).map( ([key, value]) => {\n      return (\n        <div key={key} className={\"faction\"}>\n          <Faction data={value} />\n        </div>\n      );\n    })}\n    </>\n  }\n\n  \n  \n  \n}"]},"metadata":{},"sourceType":"module"}