{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  value: 0\n};\nexport const upgradeSlice = createSlice({\n  name: 'upgrade',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = upgradeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const researchCount = state => state.upgrade.value;\nexport default upgradeSlice.reducer;","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/features/upgrade/upgradeSlice.js"],"names":["createSlice","initialState","value","upgradeSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","researchCount","upgrade","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,SADgC;AAEtCH,EAAAA,YAFsC;AAGtC;AACAI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KAPO;AAQRM,IAAAA,SAAS,EAAGD,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KAVO;AAWR;AACAO,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACpCH,MAAAA,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;AACD;AAdO;AAJ4B,CAAD,CAAhC;AAsBP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CN,YAAY,CAACS,OAAjE,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIN,KAAD,IAAWA,KAAK,CAACO,OAAN,CAAcZ,KAA/C;AAEP,eAAeC,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  value: 0,\n};\n\nexport const upgradeSlice = createSlice({\n  name: 'upgrade',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = upgradeSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const researchCount = (state) => state.upgrade.value;\n\nexport default upgradeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}