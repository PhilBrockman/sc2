{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  attack: {\n    value: 0,\n    src: \"/attack.png\"\n  },\n  armor: {\n    value: 0,\n    src: \"/armor.png\"\n  },\n  shields: {\n    value: 0,\n    src: \"/shield.png\"\n  }\n};\nexport const upgradeSlice = createSlice({\n  name: 'upgrade',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.attack.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.attack.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  incrementByAmount\n} = upgradeSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const researchCount = state => {\n  return state.attack.value;\n};\nexport const selectAttack = state => {\n  console.log('state', state);\n};\nexport default upgradeSlice.reducer;","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/features/upgrade/upgradeSlice.js"],"names":["createSlice","initialState","attack","value","src","armor","shields","upgradeSlice","name","reducers","increment","state","incrementByAmount","action","payload","actions","researchCount","selectAttack","console","log","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CADD;AAENC,IAAAA,GAAG,EAAE;AAFC,GADW;AAKnBC,EAAAA,KAAK,EAAE;AACLF,IAAAA,KAAK,EAAE,CADF;AAELC,IAAAA,GAAG,EAAE;AAFA,GALY;AASnBE,EAAAA,OAAO,EAAE;AACPH,IAAAA,KAAK,EAAE,CADA;AAEPC,IAAAA,GAAG,EAAE;AAFE;AATU,CAArB;AAeA,OAAO,MAAMG,YAAY,GAAGP,WAAW,CAAC;AACtCQ,EAAAA,IAAI,EAAE,SADgC;AAEtCP,EAAAA,YAFsC;AAGtC;AACAQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACT,MAAN,CAAaC,KAAb,IAAsB,CAAtB;AACD,KAPO;AAQR;AACAS,IAAAA,iBAAiB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACT,MAAN,CAAaC,KAAb,IAAsBU,MAAM,CAACC,OAA7B;AACD;AAXO;AAJ4B,CAAD,CAAhC;AAmBP,OAAO,MAAM;AAAEJ,EAAAA,SAAF;AAAaE,EAAAA;AAAb,IAAmCL,YAAY,CAACQ,OAAtD,C,CAEP;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAIL,KAAD,IAAY;AACvC,SAAOA,KAAK,CAACT,MAAN,CAAaC,KAApB;AACD,CAFM;AAGP,OAAO,MAAMc,YAAY,GAAIN,KAAD,IAAW;AACrCO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,KAArB;AACD,CAFM;AAIP,eAAeJ,YAAY,CAACa,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  attack: {\n    value: 0,\n    src: \"/attack.png\",\n  }, \n  armor: {\n    value: 0,\n    src: \"/armor.png\",\n  },\n  shields: {\n    value: 0,\n    src: \"/shield.png\",\n  },\n};\n\nexport const upgradeSlice = createSlice({\n  name: 'upgrade',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.attack.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.attack.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, incrementByAmount } = upgradeSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const researchCount = (state ) => {\n  return state.attack.value;\n}\nexport const selectAttack = (state) => {\n  console.log('state', state)\n};\n\nexport default upgradeSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}