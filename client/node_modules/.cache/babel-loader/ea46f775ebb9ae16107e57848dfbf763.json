{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/src/components/UnitSelector.js\",\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { units } from \"../SC2Data\";\nimport { useSpring, animated } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\",\n      starport: \"/starport.png\"\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {}\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n};\n\nconst camel2str = str => {\n  // adding space between strings\n  const result = str.replace(/([A-Z])/g, ' $1'); // converting first character to uppercase and join it to the final string\n\n  const final = result.charAt(0).toUpperCase() + result.slice(1);\n  return final;\n};\n\nexport const UnitSelector = ({\n  setUnit,\n  currentUnit\n}) => {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const [searchText, setSearchText] = React.useState(\"\");\n\n  const input = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"search\",\n    placeholder: \"...unit name\",\n    onChange: e => setSearchText(e.target.value),\n    value: searchText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 17\n  }, this);\n\n  const showUnits = subUnits => {\n    const classes = [\"unit-selection\"]; // activeUnit = ? \"#367180\": \"#\";\n\n    return subUnits.map((unit, index) => {\n      let tmpClasses = classes;\n      let inlineStyle = {\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'right',\n        backgroundImage: `url(${unit.img})`\n      };\n\n      if ((currentUnit === null || currentUnit === void 0 ? void 0 : currentUnit.name) === unit.name) {\n        tmpClasses = [...classes, \"active-unit\"];\n      } else {\n        tmpClasses = classes;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setUnit(unit),\n        className: tmpClasses.join(\" \"),\n        style: inlineStyle,\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: unit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }, this);\n    });\n  };\n\n  const Production = ({\n    structure,\n    path,\n    animations\n  }) => {\n    _s();\n\n    const [hidden, setHidden] = React.useState(false);\n    const subUnits = units.filter(unit => unit.structure === structure);\n    let display = hidden ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"units-selector\",\n      children: showUnits(subUnits)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${path})`\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"production-facility\",\n        style: inlineStyle,\n        onClick: () => setHidden(!hidden),\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: camel2str(structure)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: display\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(Production, \"kQt600tPsTduHMlWvIDJn56wzAI=\");\n\n  const Faction = ({\n    data,\n    label\n  }) => {\n    _s2();\n\n    const [hidden, setHidden] = React.useState(false);\n    const imgBackground = {\n      width: \"100%\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: imgBackground,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setHidden(!hidden),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: data.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), hidden ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Object.entries(data.production).map(([structure, path]) => {\n          return /*#__PURE__*/_jsxDEV(Production, {\n            structure: structure,\n            path: path\n          }, structure, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s2(Faction, \"kQt600tPsTduHMlWvIDJn56wzAI=\");\n\n  if (searchText.length > 0) {\n    let subUnits = units.filter(unit => unit.name.toLowerCase().includes(searchText.toLowerCase()));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [input, showUnits(subUnits)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [input, Object.entries(factions).map(([key, value]) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"faction\",\n          children: /*#__PURE__*/_jsxDEV(Faction, {\n            data: value,\n            label: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this);\n      })]\n    }, void 0, true);\n  }\n};\n\n_s3(UnitSelector, \"OAGvOw28fBJQW7HtXCjc9nvla2M=\");\n\n_c = UnitSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnitSelector\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/components/UnitSelector.js"],"names":["React","units","useSpring","animated","factions","terran","icon","production","barracks","factory","starport","zerg","protoss","roboticsFacility","camel2str","str","result","replace","final","charAt","toUpperCase","slice","UnitSelector","setUnit","currentUnit","searchText","setSearchText","useState","input","e","target","value","showUnits","subUnits","classes","map","unit","index","tmpClasses","inlineStyle","backgroundSize","backgroundRepeat","backgroundPosition","backgroundImage","img","name","join","Production","structure","path","animations","hidden","setHidden","filter","display","Faction","data","label","imgBackground","width","Object","entries","length","toLowerCase","includes","key"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {units} from \"../SC2Data\"\nimport { useSpring, animated } from 'react-spring'\n\nconst factions = {\n  terran: {\n    icon: \"/marine.png\",\n    production: {\n      barracks: \"/barracks.png\",\n      factory: \"/factory.png\",\n      starport: \"/starport.png\",\n    }\n  },\n  zerg: {\n    icon: \"/zergling.png\",\n    production: {\n\n    }\n  },\n  protoss: {\n    icon: \"/zealot.png\",\n    production: {\n      roboticsFacility: \"/robo.png\"\n    }\n  }\n}\n\nconst camel2str = (str) => {\n   // adding space between strings\n  const result = str.replace(/([A-Z])/g,' $1');\n\n  // converting first character to uppercase and join it to the final string\n  const final = result.charAt(0).toUpperCase()+result.slice(1);\n  return final\n}\n\nexport const UnitSelector = ({setUnit, currentUnit}) => {\n  const [searchText, setSearchText] = React.useState(\"\")\n  const input = <input type={\"search\"} placeholder={\"...unit name\"} onChange={(e) => setSearchText(e.target.value)} value={searchText}/>\n\n  const showUnits = (subUnits) => {\n    const classes = [\"unit-selection\"]\n\n    // activeUnit = ? \"#367180\": \"#\";\n    return subUnits.map((unit,index) => {\n      let tmpClasses = classes\n      let inlineStyle = {\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'right',\n        backgroundImage: `url(${ unit.img})`,\n      };\n      if( currentUnit?.name === unit.name){\n        tmpClasses = [...classes, \"active-unit\"]\n      } else {\n        tmpClasses = classes\n      }\n      return <div key={index} onClick={() => setUnit(unit)} className={tmpClasses.join(\" \")} style={inlineStyle}>\n        <header><h1>{unit.name}</h1></header>\n      </div>\n    })\n  }\n\n  const Production = ({structure, path, animations}) => {\n    const [hidden, setHidden] = React.useState(false)\n    const subUnits = units.filter(unit => unit.structure === structure)\n\n    let display = hidden? <></> :\n      <div className={\"units-selector\"}>{showUnits(subUnits)}</div>;\n\n    let inlineStyle = {\n      backgroundSize: 'contain',\n      backgroundRepeat: 'no-repeat',\n      backgroundImage: `url(${ path})`,\n    };\n\n    return <div>\n\n        <div className={\"production-facility\"} style={inlineStyle} onClick={() => setHidden(!hidden)}>\n          <header><h1>{camel2str(structure)}</h1></header>\n        </div>\n\n        <div>{display}</div>\n    </div>\n  }\n\n  const Faction = ({data, label}) => {\n    const [hidden, setHidden] = React.useState(false);\n\n    const imgBackground = ({\n      width:\"100%\",\n    })\n\n    return <div style={imgBackground} >\n      \n      <div onClick={() => setHidden(!hidden)}>\n        <div>{label}</div>\n        <img src={data.icon} ></img>\n        </div>\n        {hidden ? null : \n        <div>\n          {\n            Object.entries(data.production).map(([structure, path]) => {\n              return <Production \n                        key={structure} \n                        structure={structure} \n                        path={path} />\n            })\n          }\n        </div>\n      }\n      </div>\n  }\n\n  if(searchText.length > 0){\n    let subUnits = units.filter(unit => unit.name.toLowerCase().includes(searchText.toLowerCase()))\n    return <>\n      {input}\n      {showUnits(subUnits)}\n    </>\n  } else {\n    return <>\n      {input}\n      {Object.entries(factions).map( ([key, value]) => {\n      return (\n        <div key={key} className={\"faction\"}>\n          <Faction data={value} label={key} />\n        </div>\n      );\n    })}\n    </>\n  }\n\n  \n  \n  \n}"]},"metadata":{},"sourceType":"module"}