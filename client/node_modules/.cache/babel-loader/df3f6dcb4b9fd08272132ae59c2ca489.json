{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/src/components/Attacker.js\";\nimport React from 'react';\nimport { Unit } from \"./Unit\";\nimport { Upgrade } from \"./Upgrade\";\nimport { useSpring, animated } from 'react-spring';\nimport { immortal, marauder, marine } from '../SC2Data';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFENDER_DEAD = \"defender is dead\";\n\nconst Bonus = ({\n  attack,\n  defender,\n  textstyle\n}) => {\n  return attack.bonuses.map((bonus, index) => {\n    let baseText = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Anti-\", bonus.to, \":\"]\n    }, void 0, true);\n\n    let bonusText = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [bonus.baseDamage, \" (+\", bonus.researchBonus, \")\"]\n    }, void 0, true);\n\n    let modifier;\n\n    if (!defender) {\n      modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n        children: bonusText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 18\n      }, this);\n    } else {\n      const overlap = intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]);\n\n      if (overlap.length === 0) {\n        modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", bonusText, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 20\n        }, this);\n      } else {\n        if (defender.types.includes(bonus.to)) {\n          modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [bonusText, \" \\uD83C\\uDFAF\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 22\n          }, this);\n        } else {\n          modifier = /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              textDecoration: \"wavy line-through red\"\n            },\n            children: bonusText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this);\n        }\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [baseText, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: textstyle,\n        children: modifier\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c = Bonus;\n\nconst Bullet = ({\n  animate,\n  display\n}) => {\n  if (display) {\n    if (animate) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bullet\",\n        children: \"\\u27A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\u27A1\"\n      }, void 0, false);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c2 = Bullet;\n\nfunction intersection(a, b) {\n  var setA = new Set(a);\n  var setB = new Set(b);\n  var intersection = new Set([...setA].filter(x => setB.has(x)));\n  return Array.from(intersection);\n}\n\nexport const canAttackTargetDefender = (attack, defender) => {\n  if (attack && defender) {\n    console.log('defender', defender);\n    const overlap = intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]);\n    console.log('overlap', overlap);\n    return overlap.length > 0;\n  } else {\n    return false;\n  }\n};\n\nconst Attacks = ({\n  unit,\n  defender,\n  defaultIndex,\n  setDefaultIndex\n}) => {\n  const toggleIndex = index => {\n    if (index === defaultIndex) {\n      setDefaultIndex(null);\n    } else {\n      setDefaultIndex(index);\n    }\n  };\n\n  return unit.attacks.map((attack, index) => {\n    const cns = [];\n    cns.push(index === defaultIndex ? \"main-weapon\" : \"alt-weapon\");\n    const available = canAttackTargetDefender(attack, defender);\n    cns.push(available ? \"attack-available\" : \"attack-unavailable\");\n    const cn = available ? \"success\" : \"fail\";\n    console.log('available', available);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => toggleIndex(index),\n      className: cns.join(\" \"),\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attack-name\",\n          children: [/*#__PURE__*/_jsxDEV(Bullet, {\n            animate: available && defaultIndex === null,\n            display: defaultIndex !== index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 40\n          }, this), attack.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), index === defaultIndex ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Base Damage: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: cn,\n              children: [attack.baseDamage, \" + (\", attack.researchBonus, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Bonus, {\n            attack: attack,\n            defender: defender,\n            textstyle: cn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c3 = Attacks;\nexport const Attacker = ({\n  unit,\n  defender,\n  research,\n  attackChoice\n}) => {\n  const [attack, setAttack] = attackChoice; // let damageIndicator;\n  // if(unit.attacks.length > 0 ){\n  //   if(damage){\n  //     damageIndicator = <h1>⚔️ {damage}</h1>;\n  //   } else {\n  //     damageIndicator = <>⚔️ 👀 </>;\n  //   }\n  // } else {\n  //   damageIndicator = <></>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unit\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Unit, {\n        unit: unit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Attacks, {\n        unit: unit,\n        defaultIndex: attack,\n        setDefaultIndex: setAttack,\n        defender: defender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n}; // d = Damage(unit, defender, attack, attackResearch, armorResearch, shieldsResearch)\n// Damage.oneStep(unit, defender)\n\n_c4 = Attacker;\nexport class Damage {\n  constructor(attacker, defender, attack, research, guardian = 0) {\n    this.totalDamage = () => {\n      return this.damageDealt();\n      const def = this.def;\n      const att = this.att;\n      console.log('this.damageInflicted(att, def)', this.damageInflicted(att, def));\n\n      if (def.base.shields && this.damageInflicted(att, def) > def.base.shields + this.armorDefense(def)) {\n        return this.damageInflicted(att, def) - this.armorDefense(def);\n      } else {\n        return this.damageInflicted(att, def);\n      }\n    };\n\n    this.oneStep = () => {\n      const [att, def, aidx] = [this.att, this.def, this.attackIndex];\n      const results = [];\n      let log;\n\n      if (att.attacks[aidx] === undefined || !def) {\n        return \"👀\";\n      }\n\n      if (!canAttackTargetDefender(att.attacks[aidx], def)) {\n        return \"can't shoot\";\n      }\n\n      if (this.def.base.health > 0) {\n        let totalDamage = 0;\n        let damage = this.totalDamage();\n\n        for (var i = 0; i < att.attacks[aidx].repeats; i++) {\n          var _def$base;\n\n          if (((_def$base = def.base) === null || _def$base === void 0 ? void 0 : _def$base.shields) > 0) {\n            if (damage <= def.base.shields) {\n              def.base.shields -= damage;\n              log = `${damage} to shields. (${def.base.shields} remaining)`;\n            } else {\n              damage -= def.base.shields;\n              def.base.shields = 0;\n              def.base.health -= damage;\n              log = `${damage} has overloaded shields. (${def.base.health} health remaining)`;\n            }\n          } else {\n            def.base.health -= damage;\n            log = `${damage} damage. (${def.base.health} HP)`;\n          }\n\n          totalDamage += damage;\n\n          if (def.base.health < 0) {\n            const overkill = (100 * -def.base.health / totalDamage).toFixed(1);\n            log += ` (${overkill}% attack wasted)`;\n          }\n\n          results.push({\n            health: def.base.health,\n            totalDamage: totalDamage\n          });\n        }\n      }\n\n      return results;\n    };\n\n    const [attackResearch, armorResearch, shieldsResearch] = research;\n    this.research = {\n      attack: attackResearch,\n      armor: armorResearch,\n      shields: shieldsResearch\n    };\n    let Spell = 1;\n    let Hallucinated = 1;\n    let Corrupted = 1;\n    let Hardened = 900;\n    let Prismatic = 1;\n\n    this.bonusDamage = () => {\n      return this.att.attacks[this.aidx].bonuses.filter(bonus => this.def.types.includes(bonus.to)).reduce((total, amount) => {\n        return total + amount.baseDamage + amount.researchBonus * attackResearch;\n      }, 0);\n    };\n\n    this.damageDealt = () => {\n      var _this$att;\n\n      const attack = (_this$att = this.att) === null || _this$att === void 0 ? void 0 : _this$att.attacks[this.aidx];\n      console.log('attack', attack);\n      console.log('this.att.attacks', this.att.attacks);\n\n      if (this.att && this.def && attack) {\n        return attack.baseDamage + this.attackResearch * attack.researchBonus + this.bonusDamage();\n      } else {\n        return \"not enough info\";\n      }\n    };\n\n    this.armorDefense = () => {\n      return this.def.base.armor + this.armorResearch;\n    };\n\n    this.defenseAvailable = () => {\n      var _this$def$base;\n\n      if (((_this$def$base = this.def.base) === null || _this$def$base === void 0 ? void 0 : _this$def$base.shields) > 0) {\n        return this.shieldsResearch;\n      } else {\n        return this.armorDefense(this.def);\n      }\n    };\n\n    this.defenseApplied = () => {\n      return this.defenseAvailable(this.def) * Spell * (2 - Hallucinated);\n    };\n\n    this.damageReceived = () => {\n      return this.damageDealt() * Corrupted * Hallucinated * Prismatic - this.defenseApplied();\n    };\n\n    this.damageCapped = (att, def) => {\n      return Math.min(this.damageReceived(att, def), Hardened * Corrupted * Hallucinated + 900 * (1 - Spell));\n    };\n\n    this.damageInflicted = (att, def) => {\n      return Math.max(.5, this.damageCapped(att, def) - guardian);\n    };\n\n    this.att = JSON.parse(JSON.stringify(attacker));\n    this.def = JSON.parse(JSON.stringify(defender));\n    this.attackIndex = attack;\n  }\n\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Bonus\");\n$RefreshReg$(_c2, \"Bullet\");\n$RefreshReg$(_c3, \"Attacks\");\n$RefreshReg$(_c4, \"Attacker\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/components/Attacker.js"],"names":["React","Unit","Upgrade","useSpring","animated","immortal","marauder","marine","DEFENDER_DEAD","Bonus","attack","defender","textstyle","bonuses","map","bonus","index","baseText","to","bonusText","baseDamage","researchBonus","modifier","overlap","intersection","targets","types","length","includes","textDecoration","Bullet","animate","display","a","b","setA","Set","setB","filter","x","has","Array","from","canAttackTargetDefender","console","log","Attacks","unit","defaultIndex","setDefaultIndex","toggleIndex","attacks","cns","push","available","cn","join","name","Attacker","research","attackChoice","setAttack","Damage","constructor","attacker","guardian","totalDamage","damageDealt","def","att","damageInflicted","base","shields","armorDefense","oneStep","aidx","attackIndex","results","undefined","health","damage","i","repeats","overkill","toFixed","attackResearch","armorResearch","shieldsResearch","armor","Spell","Hallucinated","Corrupted","Hardened","Prismatic","bonusDamage","reduce","total","amount","defenseAvailable","defenseApplied","damageReceived","damageCapped","Math","min","max","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Unit} from \"./Unit\"\nimport {Upgrade} from \"./Upgrade\"\nimport { useSpring, animated } from 'react-spring'\nimport { immortal, marauder, marine } from '../SC2Data'\n\nconst DEFENDER_DEAD = \"defender is dead\"\n\nconst Bonus = ({attack, defender, textstyle}) => {\n\n  return attack.bonuses.map((bonus, index) => {\n    let baseText = <>Anti-{bonus.to}:</>\n    let bonusText = <>{bonus.baseDamage} (+{bonus.researchBonus})</>;\n    let modifier;\n    \n    if(!defender){\n      modifier = <span>{bonusText}</span>\n    } else {\n      const overlap = intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]);\n      if (overlap.length === 0){\n        modifier = <span> {bonusText} </span>\n      }else{\n        if (defender.types.includes(bonus.to) ){\n          modifier=  <span>{bonusText} 🎯</span>\n        } else {\n          modifier= <span style={{textDecoration: \"wavy line-through red\"}}>{ bonusText}</span>\n        }\n      }\n    }\n\n    return <div key={index}>\n      {baseText}\n      <span className={textstyle}>\n      {modifier}\n      </span>\n    </div>\n  })\n\n  \n}\n\nconst Bullet = ({animate, display}) => {\n  if(display){\n    if (animate){\n      return <span className={\"bullet\"}>➡</span>\n    } else {\n      return <>➡</>\n    }\n  } else {\n    return <></>\n  }\n}\n\nfunction intersection(a, b) {\n  var setA = new Set(a);\n  var setB = new Set(b);\n  var intersection = new Set([...setA].filter(x => setB.has(x)));\n  return Array.from(intersection);\n}\n\nexport const canAttackTargetDefender = (attack, defender) => {\n\n  if(attack && defender){\n    console.log('defender', defender)\n    const overlap = intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]);\n    console.log('overlap', overlap)\n    return overlap.length > 0\n  } else {\n    return false\n  }\n}\n\nconst Attacks = ({unit, defender, defaultIndex, setDefaultIndex}) => {\n  const toggleIndex = (index) => {\n      if(index === defaultIndex){\n        setDefaultIndex(null)\n      } else {\n        setDefaultIndex(index)\n      }\n    }\n  return unit.attacks.map((attack, index) => {\n    const cns = []\n    cns.push(index === defaultIndex ? \"main-weapon\" : \"alt-weapon\");\n    const available = canAttackTargetDefender(attack, defender);\n    cns.push(available ? \"attack-available\" : \"attack-unavailable\");\n    const cn = available ? \"success\" : \"fail\";\n    console.log('available', available)\n\n    return <div key={index} onClick={() => toggleIndex(index)} className={cns.join(\" \")}>\n      <>\n        <div className={\"attack-name\"}><Bullet animate={available && (defaultIndex === null)} display={(defaultIndex !== index)}/>{attack.name}</div>\n        {index === defaultIndex ?\n          <div>\n            <>Base Damage: <span className={cn}>{attack.baseDamage} + ({attack.researchBonus})</span></>\n            <Bonus attack={attack} defender={defender} textstyle={cn}/>\n          </div>\n          : null\n          }\n      </>\n    </div>\n  })\n}\n\n\n\nexport const Attacker = ({unit, defender, research, attackChoice}) => {\n  const [attack, setAttack] = attackChoice;\n\n  // let damageIndicator;\n  // if(unit.attacks.length > 0 ){\n  //   if(damage){\n  //     damageIndicator = <h1>⚔️ {damage}</h1>;\n  //   } else {\n  //     damageIndicator = <>⚔️ 👀 </>;\n  //   }\n  // } else {\n  //   damageIndicator = <></>;\n  // }\n\n  return <div className={\"unit\"}>\n    <div>\n    <Unit unit={unit}>\n    </Unit>\n      <Attacks unit={unit} defaultIndex={attack} setDefaultIndex={setAttack} defender={defender} />\n    </div>\n  </div>\n}\n\n\n\n\n// d = Damage(unit, defender, attack, attackResearch, armorResearch, shieldsResearch)\n// Damage.oneStep(unit, defender)\nexport class Damage{\n  constructor( attacker, defender, attack, research, guardian=0) {\n  const [attackResearch, armorResearch, shieldsResearch] = research\n  this.research = {\n    attack: attackResearch,\n    armor: armorResearch,\n    shields: shieldsResearch\n  }\n  let Spell = 1\n  let Hallucinated = 1\n  let Corrupted = 1\n  let Hardened = 900\n  let Prismatic = 1\n\n  this.bonusDamage = () => {\n    return this.att.attacks[this.aidx].bonuses.filter(bonus => this.def.types.includes(bonus.to)).reduce((total, amount) => {\n      return total+amount.baseDamage+amount.researchBonus*attackResearch\n    }, 0)\n  }\n\n  this.damageDealt = () => {\n    const attack = this.att?.attacks[this.aidx]\n    console.log('attack', attack)\n    console.log('this.att.attacks', this.att.attacks)\n    if(this.att && this.def && attack){\n      return (\n        attack.baseDamage +\n        this.attackResearch*attack.researchBonus +\n        this.bonusDamage()\n      )  \n    } else {\n      return \"not enough info\"\n    }\n  }\n\n  this.armorDefense = () => {\n    return this.def.base.armor + this.armorResearch\n  }\n\n  this.defenseAvailable = () => {\n    if(this.def.base?.shields > 0){\n      return this.shieldsResearch\n    } else {\n      return this.armorDefense(this.def)\n    }\n  }\n\n  this.defenseApplied = () => {\n    return this.defenseAvailable(this.def)*Spell*(2-Hallucinated)\n  }\n\nthis.damageReceived = () => {\n    return this.damageDealt()*Corrupted*Hallucinated*Prismatic - this.defenseApplied();\n  }\n\n\n  this.damageCapped = (att, def) => {\n    return Math.min(\n      this.damageReceived(att, def),\n      Hardened*Corrupted*Hallucinated+900*(1-Spell)\n    );\n  }\n\n  this.damageInflicted = (att, def) => {\n    return Math.max(\n      .5,\n      this.damageCapped(att, def) - guardian\n    );\n  }\n\n\n  this.att = JSON.parse(JSON.stringify(attacker));\n  this.def = JSON.parse(JSON.stringify(defender));\n  this.attackIndex = attack\n}\n\ntotalDamage = () => {\n  return this.damageDealt()\n  const def = this.def\n  const att = this.att\n  console.log('this.damageInflicted(att, def)', this.damageInflicted(att, def))\n  if(def.base.shields && this.damageInflicted(att, def) > def.base.shields + this.armorDefense(def)){\n    return this.damageInflicted(att, def)-this.armorDefense(def)\n  } else {\n    return this.damageInflicted(att, def)\n  }\n}\n\noneStep = () => {\n  const [att, def, aidx] = [this.att, this.def, this.attackIndex]\n  const results = []\n  let log;\n\n  if(att.attacks[aidx] === undefined || !def){\n    return \"👀\"\n  } if(\n    !canAttackTargetDefender(att.attacks[aidx], def)\n  ){\n    return \"can't shoot\"\n  }\n  if(this.def.base.health > 0){\n    let totalDamage=0;\n\n    let damage = this.totalDamage();\n    for(var i = 0; i < att.attacks[aidx].repeats; i++){\n      if(def.base?.shields > 0){\n        if(damage <= def.base.shields){\n          def.base.shields -= damage\n          log = `${damage} to shields. (${def.base.shields} remaining)`\n        } else {\n          damage -= def.base.shields;\n          def.base.shields = 0;\n          def.base.health -= damage;\n          log = `${damage} has overloaded shields. (${def.base.health} health remaining)`\n        }\n      } else {\n        def.base.health -= damage;\n        log = `${damage} damage. (${def.base.health} HP)`\n      }\n      totalDamage += damage;\n      if(def.base.health < 0){\n        const overkill = (100*-def.base.health/totalDamage).toFixed(1)\n        log += ` (${overkill}% attack wasted)`\n      }\n      results.push({health: def.base.health, totalDamage: totalDamage})\n    }\n  }\n  return results\n}\n}\n"]},"metadata":{},"sourceType":"module"}