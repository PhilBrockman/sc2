{"ast":null,"code":"var _jsxFileName = \"/Users/philbrockman/coding/sc2/src/components/Attacker.js\";\nimport React from 'react';\nimport { Unit } from \"./Unit\";\nimport { Upgrade } from \"./Upgrade\";\nimport { useSpring, animated } from 'react-spring';\nimport { immortal, marauder, marine } from '../SC2Data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DEFENDER_DEAD = \"defender is dead\";\n\nconst Bonus = ({\n  attack,\n  defender,\n  style\n}) => {\n  const d = new Damage(marauder, immortal, 0, [0, 0, 0]);\n  console.log('hi', 1 + 1);\n  let i = 0;\n\n  while (true) {\n    i++;\n    const x = d.oneStep();\n\n    if (x.length > 0) {\n      console.log('x', x);\n    } else {\n      console.log('i', i);\n      break;\n    }\n  }\n\n  return attack.bonuses.map((bonus, index) => {\n    let bonusText = ` +${bonus.baseDamage} + (${bonus.researchBonus})`;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Anti-\", bonus.to, \":\", defender.types.includes(bonus.to) ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: style,\n          children: bonusText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: \"wavy line-through red\"\n          },\n          children: bonusText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  });\n};\n\n_c = Bonus;\n\nconst Bullet = ({\n  animate,\n  display\n}) => {\n  if (display) {\n    if (animate) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bullet\",\n        children: \"\\u27A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\u27A1\"\n      }, void 0, false);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_c2 = Bullet;\n\nfunction intersection(a, b) {\n  var setA = new Set(a);\n  var setB = new Set(b);\n  var intersection = new Set([...setA].filter(x => setB.has(x)));\n  return Array.from(intersection);\n}\n\nconst canAttackTargetDefender = (attack, defender) => intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]).length > 0;\n\nconst Attacks = ({\n  unit,\n  defender,\n  defaultIndex,\n  setDefaultIndex,\n  setDamage\n}) => {\n  const toggleIndex = index => {\n    if (index === defaultIndex) {\n      setDefaultIndex(null);\n      setDamage(null);\n    } else {\n      setDefaultIndex(index);\n    }\n  };\n\n  return unit.attacks.map((attack, index) => {\n    const style = index === defaultIndex ? \"main-weapon\" : \"alt-weapon\";\n    const available = canAttackTargetDefender(attack, defender);\n    const cn = available ? \"success\" : \"fail\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => toggleIndex(index),\n      className: style,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attack-name\",\n          children: [/*#__PURE__*/_jsxDEV(Bullet, {\n            animate: defaultIndex === null,\n            display: available && defaultIndex !== index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 40\n          }, this), attack.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), index === defaultIndex ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Base Damage: \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: cn,\n              children: [attack.baseDamage, \" + (\", attack.researchBonus, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Bonus, {\n            attack: attack,\n            defender: defender,\n            style: cn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  });\n};\n\n_c3 = Attacks;\nexport const Attacker = ({\n  unit,\n  defender,\n  research,\n  attackChoice,\n  damage,\n  setDamage\n}) => {\n  const [attack, setAttack] = attackChoice;\n  const [attackResearch, setAttackResearch] = research;\n  let damageIndicator;\n\n  if (unit.attacks.length > 0) {\n    if (damage) {\n      damageIndicator = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u2694\\uFE0F \", damage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this);\n    } else {\n      damageIndicator = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \"\\u2694\\uFE0F \\uD83D\\uDC40 \"\n      }, void 0, false);\n    }\n  } else {\n    damageIndicator = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unit\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Unit, {\n        type: unit,\n        children: damageIndicator\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Attacks, {\n        unit: unit,\n        defaultIndex: attack,\n        setDefaultIndex: setAttack,\n        defender: defender,\n        setDamage: setDamage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upgrades\",\n      children: /*#__PURE__*/_jsxDEV(Upgrade, {\n        researchKind: \"attack\",\n        updateResearch: setAttackResearch,\n        value: attackResearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 10\n  }, this);\n}; // d = Damage(unit, defender, attack, attackResearch, armorResearch, shieldsResearch)\n// Damage.oneStep(unit, defender)\n\n_c4 = Attacker;\n\nclass Damage {\n  constructor(attacker, defender, attack, research, guardian = 0) {\n    this.oneStep = () => {\n      const [att, def, aidx] = [this.att, this.def, this.attackIndex];\n      const results = [];\n      let log;\n\n      if (att.attacks[aidx] === undefined) {\n        return \"👀\";\n      }\n\n      if (this.def.base.health > 0) {\n        let totalDamage = 0;\n        let damage = this.totalDamage(att, def);\n\n        for (var i = 0; i < att.attacks[aidx].repeats; i++) {\n          var _def$base;\n\n          if (((_def$base = def.base) === null || _def$base === void 0 ? void 0 : _def$base.shields) > 0) {\n            if (damage <= def.base.shields) {\n              def.base.shields -= damage;\n              log = `${damage} to shields. (${def.base.shields} remaining)`;\n            } else {\n              damage -= def.base.shields;\n              def.base.shields = 0;\n              def.base.health -= damage;\n              log = `${damage} has overloaded shields. (${def.base.health} health remaining)`;\n            }\n          } else {\n            def.base.health -= damage;\n            log = `${damage} damage. (${def.base.health} HP)`;\n          }\n\n          totalDamage += damage;\n\n          if (def.base.health < 0) {\n            const overkill = (100 * -def.base.health / totalDamage).toFixed(1);\n            log += ` (${overkill}% attack wasted)`;\n          }\n\n          results.push({\n            health: def.base.health,\n            totalDamage: totalDamage\n          });\n        }\n      }\n\n      return results;\n    };\n\n    const [attackResearch, armorResearch, shieldsResearch] = research;\n    let Spell = 1;\n    let Hallucinated = 1;\n    let Corrupted = 1;\n    let Hardened = 900;\n    let Prismatic = 1;\n\n    const bonusDamage = (att, def) => {\n      return att.attacks[attack].bonuses.filter(bonus => def.types.includes(bonus.to)).reduce((total, amount) => {\n        return total + amount.baseDamage + amount.researchBonus * attackResearch;\n      }, 0);\n    };\n\n    const damageDealt = (att, def) => {\n      return att.attacks[attack].baseDamage + attackResearch * att.attacks[attack].researchBonus + bonusDamage(att, def);\n    };\n\n    const armorDefense = unit => {\n      return unit.base.armor + armorResearch;\n    };\n\n    const defenseAvailable = unit => {\n      var _unit$base;\n\n      if (((_unit$base = unit.base) === null || _unit$base === void 0 ? void 0 : _unit$base.shields) > 0) {\n        return shieldsResearch;\n      } else {\n        return armorDefense(unit);\n      }\n    };\n\n    const defenseApplied = unit => {\n      return defenseAvailable(unit) * Spell * (2 - Hallucinated);\n    };\n\n    const damageReceived = (att, def) => {\n      return damageDealt(att, def) * Corrupted * Hallucinated * Prismatic - defenseApplied(def);\n    };\n\n    const damageCapped = (att, def) => {\n      return Math.min(damageReceived(att, def), Hardened * Corrupted * Hallucinated + 900 * (1 - Spell));\n    };\n\n    const damageInflicted = (att, def) => {\n      return Math.max(.5, damageCapped(att, def) - guardian);\n    };\n\n    this.totalDamage = (att, def) => {\n      if (def.base.shields && damageInflicted(att, def) > def.base.shields + armorDefense(def)) {\n        console.log('def', def);\n        return damageInflicted(att, def) - armorDefense(def);\n      } else {\n        return damageInflicted(att, def);\n      }\n    };\n\n    this.att = JSON.parse(JSON.stringify(attacker));\n    this.def = JSON.parse(JSON.stringify(defender));\n    this.attackIndex = attack;\n  }\n\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Bonus\");\n$RefreshReg$(_c2, \"Bullet\");\n$RefreshReg$(_c3, \"Attacks\");\n$RefreshReg$(_c4, \"Attacker\");","map":{"version":3,"sources":["/Users/philbrockman/coding/sc2/src/components/Attacker.js"],"names":["React","Unit","Upgrade","useSpring","animated","immortal","marauder","marine","DEFENDER_DEAD","Bonus","attack","defender","style","d","Damage","console","log","i","x","oneStep","length","bonuses","map","bonus","index","bonusText","baseDamage","researchBonus","to","types","includes","textDecoration","Bullet","animate","display","intersection","a","b","setA","Set","setB","filter","has","Array","from","canAttackTargetDefender","targets","Attacks","unit","defaultIndex","setDefaultIndex","setDamage","toggleIndex","attacks","available","cn","name","Attacker","research","attackChoice","damage","setAttack","attackResearch","setAttackResearch","damageIndicator","constructor","attacker","guardian","att","def","aidx","attackIndex","results","undefined","base","health","totalDamage","repeats","shields","overkill","toFixed","push","armorResearch","shieldsResearch","Spell","Hallucinated","Corrupted","Hardened","Prismatic","bonusDamage","reduce","total","amount","damageDealt","armorDefense","armor","defenseAvailable","defenseApplied","damageReceived","damageCapped","Math","min","damageInflicted","max","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Unit} from \"./Unit\"\nimport {Upgrade} from \"./Upgrade\"\nimport { useSpring, animated } from 'react-spring'\nimport { immortal, marauder, marine } from '../SC2Data'\n\nconst DEFENDER_DEAD = \"defender is dead\"\n\nconst Bonus = ({attack, defender, style}) => {\n\n  const d = new Damage(marauder, immortal, 0, [0, 0, 0])\nconsole.log('hi', 1+1)\nlet i = 0\nwhile(true){\n  i++;\n  const x = d.oneStep();\n  if(x.length > 0){\n    console.log('x', x)\n  } else {\n    console.log('i', i)\n    break;\n  }\n}\n\n  return attack.bonuses.map((bonus, index) => {\n    let bonusText = ` +${bonus.baseDamage} + (${bonus.researchBonus})`;\n\n    return <>\n      <div key={index}>\n        Anti-{bonus.to}:\n        {defender.types.includes(bonus.to) ?\n        <span className={style}>\n          {bonusText}\n        </span>:\n        <span style={{textDecoration: \"wavy line-through red\"}}>{ bonusText}</span>\n        }\n      </div>\n    </>;\n  })\n}\n\nconst Bullet = ({animate, display}) => {\n  if(display){\n    if (animate){\n      return <span className={\"bullet\"}>➡</span>\n    } else {\n      return <>➡</>\n    }\n  } else {\n    return <></>\n  }\n}\n\nfunction intersection(a, b) {\n  var setA = new Set(a);\n  var setB = new Set(b);\n  var intersection = new Set([...setA].filter(x => setB.has(x)));\n  return Array.from(intersection);\n}\n\nconst canAttackTargetDefender = (attack, defender) => intersection(intersection(attack.targets, defender.types), [\"Ground\", \"Air\"]).length > 0\n\nconst Attacks = ({unit, defender, defaultIndex, setDefaultIndex, setDamage}) => {\n  const toggleIndex = (index) => {\n      if(index === defaultIndex){\n        setDefaultIndex(null)\n        setDamage(null)\n      } else {\n        setDefaultIndex(index)\n      }\n    }\n  return unit.attacks.map((attack, index) => {\n    const style = index === defaultIndex ? \"main-weapon\" : \"alt-weapon\";\n    const available = canAttackTargetDefender(attack, defender)\n    const cn = available ? \"success\" : \"fail\";\n\n    return <div key={index} onClick={() => toggleIndex(index)} className={style}>\n      <>\n        <div className={\"attack-name\"}><Bullet animate={defaultIndex === null} display={available && (defaultIndex !== index)}/>{attack.name}</div>\n        {index === defaultIndex ?\n          <div>\n            <>Base Damage: <span className={cn}>{attack.baseDamage} + ({attack.researchBonus})</span></>\n            <Bonus attack={attack} defender={defender} style={cn}/>\n          </div>\n          : null\n          }\n      </>\n    </div>\n  })\n}\n\n\n\nexport const Attacker = ({unit, defender, research, attackChoice, damage, setDamage}) => {\n  const [attack, setAttack] = attackChoice;\n  const [attackResearch, setAttackResearch] = research;\n\n  let damageIndicator;\n  if(unit.attacks.length > 0 ){\n    if(damage){\n      damageIndicator = <h1>⚔️ {damage}</h1>;\n    } else {\n      damageIndicator = <>⚔️ 👀 </>;\n    }\n  } else {\n    damageIndicator = <></>;\n  }\n\n  return <div className={\"unit\"}>\n    <div>\n    <Unit type={unit}>\n      {damageIndicator}\n    </Unit>\n      <Attacks unit={unit} defaultIndex={attack} setDefaultIndex={setAttack} defender={defender} setDamage={setDamage}/>\n    </div>\n    <div className={\"upgrades\"}>\n      <Upgrade researchKind={\"attack\"} updateResearch={setAttackResearch} value={attackResearch} />\n    </div>\n  </div>\n}\n\n\n\n\n// d = Damage(unit, defender, attack, attackResearch, armorResearch, shieldsResearch)\n// Damage.oneStep(unit, defender)\nclass Damage{\n  constructor( attacker, defender, attack, research, guardian=0) {\n  const [attackResearch, armorResearch, shieldsResearch] = research\n  let Spell = 1\n  let Hallucinated = 1\n  let Corrupted = 1\n  let Hardened = 900\n  let Prismatic = 1\n\n  const bonusDamage = (att, def) => {\n    return att.attacks[attack].bonuses.filter(bonus => def.types.includes(bonus.to)).reduce((total, amount) => {\n      return total+amount.baseDamage+amount.researchBonus*attackResearch\n    }, 0)\n  }\n\n  const damageDealt = (att, def) => {\n    return (\n      att.attacks[attack].baseDamage +\n      attackResearch*att.attacks[attack].researchBonus +\n      bonusDamage(att, def)\n    )\n  }\n\n  const armorDefense = (unit) => {\n    return unit.base.armor + armorResearch\n  }\n\n  const defenseAvailable = (unit) => {\n    if(unit.base?.shields > 0){\n      return shieldsResearch\n    } else {\n      return armorDefense(unit)\n    }\n  }\n\n  const defenseApplied = (unit) => {\n    return defenseAvailable(unit)*Spell*(2-Hallucinated)\n  }\n\n  const damageReceived = (att, def) => {\n    return damageDealt(att, def)*Corrupted*Hallucinated*Prismatic - defenseApplied(def);\n  }\n\n\n  const damageCapped = (att, def) => {\n    return Math.min(\n      damageReceived(att, def),\n      Hardened*Corrupted*Hallucinated+900*(1-Spell)\n    );\n  }\n\n  const damageInflicted = (att, def) => {\n    return Math.max(\n      .5,\n      damageCapped(att, def) - guardian\n    );\n  }\n\n  this.totalDamage = (att, def) => {\n    if(def.base.shields && damageInflicted(att, def) > def.base.shields + armorDefense(def)){\n      console.log('def', def)\n      return damageInflicted(att, def)-armorDefense(def)\n    } else {\n      return damageInflicted(att, def)\n    }\n  }\n\n\n  this.att = JSON.parse(JSON.stringify(attacker));\n  this.def = JSON.parse(JSON.stringify(defender));\n  this.attackIndex = attack\n}\n\noneStep = () => {\n  const [att, def, aidx] = [this.att, this.def, this.attackIndex]\n  const results = []\n  let log;\n\n  if(att.attacks[aidx] === undefined){\n    return \"👀\"\n  }\n  if(this.def.base.health > 0){\n    let totalDamage=0;\n\n    let damage = this.totalDamage(att, def);\n    for(var i = 0; i < att.attacks[aidx].repeats; i++){\n      if(def.base?.shields > 0){\n        if(damage <= def.base.shields){\n          def.base.shields -= damage\n          log = `${damage} to shields. (${def.base.shields} remaining)`\n        } else {\n          damage -= def.base.shields;\n          def.base.shields = 0;\n          def.base.health -= damage;\n          log = `${damage} has overloaded shields. (${def.base.health} health remaining)`\n        }\n      } else {\n        def.base.health -= damage;\n        log = `${damage} damage. (${def.base.health} HP)`\n      }\n      totalDamage += damage;\n      if(def.base.health < 0){\n        const overkill = (100*-def.base.health/totalDamage).toFixed(1)\n        log += ` (${overkill}% attack wasted)`\n      }\n      results.push({health: def.base.health, totalDamage: totalDamage})\n    }\n  }\n  return results\n}\n}\n"]},"metadata":{},"sourceType":"module"}